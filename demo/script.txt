var sch = new Schema(data[0], sch_types);

db.create("real_estate", sch);

db.insert("real_estate", data.slice(1));

db.dump("original");

has_lots_of_beds = function (beds) {return beds > 6;};
db.eval(db.select("real_estate", has_lots_of_beds))

is_mf = function (type) {return type == "Multi-Family";};
change_to_md = function (type) {type = "Multidwelling";};
is_md = function (type) {return type == "Multidwelling";};
db.update("real_estate", change_to_md, is_mf);
db.eval(db.select("real_estate", is_mf)); /* RETURN NOTHING* */
db.eval(db.select("real_estate", is_md));

db.delete("real_estate", has_lots_of_beds);
db.eval(db.select("real_estate", has_lots_of_beds));

var proj_sch = new Schema([data[0][0]], [sch_types[0]]);
var proj_func = function(street) {return [street];};
db.eval(db.project("real_estate", proj_sch, proj_func));

var group_sch = new Schema([data[0][4], data[0][9]], [sch_types[4], sch_types[9]])
var group_func = '[beds]' /* Return number of beds */
var aggre_func = '{0} @ + parseInt(price)' /* Sum price */
db.eval(db.fold("real_estate", group_func, aggre_func, group_sch));

db.create('simple', new Schema(['num'], [types.INTEGER]));
db.insert('simple', [[0], [1]]);
txn_1 = db.begin_transaction('simple', 'lock');
txn_2 = db.begin_transaction('simple', 'lock');
txn_1.update('simple', function(num) {num = 10}, function(num) {return num == 1});
txn_2.update('simple', function(num) {num = 20}, function(num) {return num == 0});
txn_1.update('simple', function(num) {num = 10}, function(num) {return num == 0});
txn_2.update('simple', function(num) {num = 20}, function(num) {return num == 1});
assert(util.array_deep_eq(db.eval(db.select('simple')), [[0], [1]]), "Failed to save original table")
txn_2.commit();
assert(util.array_deep_eq(db.eval(db.select('simple')), [[20], [20]]), "Failed to commit")

db.eval(db.select("real_estate", is_md));

db.load("original");
db.eval(db.select("real_estate", is_md));